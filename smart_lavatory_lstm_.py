# -*- coding: utf-8 -*-
"""Smart_Lavatory_LSTM .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10jD0_92-hm5iw2bBZRrg_vJGOkrCIEkb
"""

import pandas as pd
import numpy as np

from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
import tensorflow as tf
from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay,roc_curve, auc

df=pd.read_csv("Smart Lavatory System.csv")

from sklearn import preprocessing
label_encoder = preprocessing.LabelEncoder()

df['VOC']= label_encoder.fit_transform(df['VOC'])

df['VOC'].unique()
df

def set_values(row):
    if row['No. of Users(IR)'] > 12 or row['Gas Sensor(MQ137)-ppm'] > 100 or row['Gas Sensor(MQ4)-ppm'] > 500 or row['Gas Sensor(MQ8)-ppm'] > 500 or row['VOC']==1 or 20 <= row['Temperature(DHT22)(in deg. celsius)'] <= 24 or 30 <= row['Humidity(RH)%'] <= 60:
        return '1'

    else:
        return '0'

df['Cleaniness'] = df.apply(set_values, axis=1)
df[100:200]



df['Cleaniness'] = df['Cleaniness'].astype(int)

X = df[['Gas Sensor(MQ137)-ppm', 'Gas Sensor(MQ4)-ppm', 'Gas Sensor(MQ8)-ppm', 'VOC','Temperature(DHT22)(in deg. celsius)', 'Humidity(RH)%']]
y = df['Cleaniness']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

X_train = X_train.reshape((X_train.shape[0], 1, X_train.shape[1]))
X_test = X_test.reshape((X_test.shape[0], 1, X_test.shape[1]))

print(f"X_train shape: {X_train.shape}")
print(f"X_test shape: {X_test.shape}")

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.optimizers import Adam
# Define the LSTM model
model = Sequential()
model.add(LSTM(50, activation='relu', input_shape=(1, 6)))
# model.add(Dropout(0.2))
model.add(Dense(1, activation='sigmoid'))



optimizer = Adam(learning_rate=0.001)
model.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])
model.summary()

history = model.fit(X_train, y_train, epochs=300, batch_size=20, validation_split=0.2, verbose=1)



loss, accuracy = model.evaluate(X_train, y_train, verbose=0)
print(f'Train Accuracy: {accuracy*100:.2f}%')

loss, accuracy = model.evaluate(X_test, y_test, verbose=0)
print(f'Test Accuracy: {accuracy*100:.2f}%')

y_pred = model.predict(X_test)
y_pred = (y_pred > 0.5).astype(int)

print(f'Predicted: {y_pred.flatten()}')
print(f'Actual: {y_test.values}')

from sklearn.metrics import mean_squared_error
import numpy as np

# Assuming y_test is in the form of a numpy array or pandas Series
rmse = np.sqrt(mean_squared_error(y_test.values, y_pred.flatten()))
print(f'RMSE: {rmse:.2f}')

# plt.figure(figsize=(14, 7))
# plt.plot(range(len(y_test)), y_test.values, label='Actual')
# plt.plot(range(len(y_test)), y_pred.flatten(), label='Predicted')
# plt.title('Actual vs Predicted Cleanliness')
# plt.xlabel('Sample Index')
# plt.ylabel('Cleanliness')
# plt.legend()
# plt.grid(True)
# plt.show()
y_pred_flat = y_pred.flatten()
y_test_flat = y_test.values

# Plotting a side-by-side comparison of predicted and actual values
plt.figure(figsize=(14, 7))
plt.plot(y_test_flat, label='Actual', marker='o', linestyle='', markersize=5)
plt.plot(y_pred_flat, label='Predicted', marker='x', linestyle='', markersize=5)
plt.title('Actual vs Predicted Cleanliness')
plt.xlabel('Sample Index')
plt.ylabel('Cleanliness')
plt.legend()
plt.grid(True)
plt.show()

# Plot the confusion matrix
conf_matrix = confusion_matrix(y_test_flat, y_pred_flat)
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Predicted 0', 'Predicted 1'], yticklabels=['Actual 0', 'Actual 1'])
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

# Print classification report
print('Classification Report:')
print(classification_report(y_test_flat, y_pred_flat))

plt.plot(history.history['accuracy'], label='train')
plt.plot(history.history['val_accuracy'], label='validation')
plt.legend()
plt.savefig('accuracy_plot.png')
plt.show()



y_test_flat = y_test.values.flatten()
plt.figure(figsize=(10, 5))
plt.scatter(range(len(y_test_flat)), y_test_flat, color='blue', label='Actual')
plt.scatter(range(len(y_test_flat)), y_pred.flatten(), color='red', label='Predicted')
plt.title('Actual vs Predicted Values')
plt.xlabel('Sample index')
plt.ylabel('Value')
plt.legend()
plt.savefig('actual_vs_predicted.png')
plt.show()

cm = confusion_matrix(y_test_flat, y_pred.flatten())
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot()
plt.title('Confusion Matrix')
plt.savefig('confusion_matrix.png')

plt.show()

